from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from order.models import Order
from address.models import Address
from state.models import State
from django.contrib.auth.models import User
import random


class Command(BaseCommand):
    help = 'Crea Ã³rdenes de prueba con diferentes fechas de entrega para testing del calendario'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=30,
            help='NÃºmero de Ã³rdenes a crear (default: 30)'
        )
        parser.add_argument(
            '--clean',
            action='store_true',
            help='Elimina Ã³rdenes de prueba existentes antes de crear nuevas'
        )

    def handle(self, *args, **options):
        count = options['count']
        clean = options['clean']

        # Limpiar Ã³rdenes de prueba si se solicita
        if clean:
            test_user = User.objects.filter(username='test_seed_user').first()
            if test_user:
                deleted_count = Order.objects.filter(user=test_user).count()
                Order.objects.filter(user=test_user).delete()
                self.stdout.write(self.style.WARNING(f'Eliminadas {deleted_count} Ã³rdenes de prueba existentes'))

        # Obtener o crear estado
        state, _ = State.objects.get_or_create(
            name='CDMX',
            defaults={'name': 'CDMX'}
        )

        # Obtener o crear usuario de prueba
        user, created = User.objects.get_or_create(
            username='test_seed_user',
            defaults={
                'email': 'test@seed.com',
                'first_name': 'Test',
                'last_name': 'Seed'
            }
        )

        if created:
            self.stdout.write(self.style.SUCCESS(f'Usuario de prueba creado: {user.username}'))

        # Obtener o crear direcciÃ³n
        address, created = Address.objects.get_or_create(
            postal_code='54321',
            number=999,
            defaults={
                'street': 'Calle de Prueba',
                'interior_number': 1,
                'colony': 'Colonia Seed',
                'delegation_or_municipality': 'DelegaciÃ³n Test',
                'city': 'CDMX',
                'state': state,
                'phone_number': '5555555555'
            }
        )

        if created:
            self.stdout.write(self.style.SUCCESS('DirecciÃ³n de prueba creada'))

        # Definir estados posibles para las Ã³rdenes
        statuses = ['pending', 'payment_confirmed', 'preparing', 'in_transit', 'delivered']

        # Crear Ã³rdenes con diferentes fechas
        today = timezone.now()
        created_count = 0

        self.stdout.write(self.style.SUCCESS(f'\nCreando {count} Ã³rdenes de prueba...'))

        for i in range(count):
            # Generar fecha aleatoria entre -30 y +30 dÃ­as
            days_offset = random.randint(-30, 30)
            delivery_date = today + timedelta(days=days_offset)
            
            # Crear la orden
            order = Order.objects.create(
                shipping_address=address,
                user=user,
                delivery_date=delivery_date,
                status=random.choice(statuses)
            )
            
            created_count += 1
            
            # Mostrar progreso cada 10 Ã³rdenes
            if (i + 1) % 10 == 0:
                self.stdout.write(f'  Creadas {i + 1} Ã³rdenes...')

        # Crear algunas Ã³rdenes con delivery_date NULL para probar el fallback a created_at
        null_delivery_orders = 5
        self.stdout.write(self.style.WARNING(f'\nCreando {null_delivery_orders} Ã³rdenes sin delivery_date (usarÃ¡n created_at)...'))
        
        for i in range(null_delivery_orders):
            order = Order.objects.create(
                shipping_address=address,
                user=user,
                status=random.choice(statuses)
            )
            # Forzar delivery_date a None
            Order.objects.filter(id=order.id).update(delivery_date=None)
            created_count += 1

        # Resumen
        self.stdout.write(self.style.SUCCESS(f'\nâœ… Total de Ã³rdenes creadas: {created_count}'))
        self.stdout.write(self.style.SUCCESS(f'   - Con delivery_date: {count}'))
        self.stdout.write(self.style.SUCCESS(f'   - Sin delivery_date (NULL): {null_delivery_orders}'))
        
        # EstadÃ­sticas
        total_orders = Order.objects.filter(user=user).count()
        self.stdout.write(self.style.SUCCESS(f'\nðŸ“Š Total de Ã³rdenes del usuario de prueba: {total_orders}'))
        
        # Mostrar algunas Ã³rdenes de ejemplo
        self.stdout.write(self.style.SUCCESS('\nðŸ“‹ Primeras 5 Ã³rdenes creadas:'))
        for order in Order.objects.filter(user=user).order_by('-created_at')[:5]:
            delivery = order.delivery_date.date() if order.delivery_date else order.created_at.date()
            self.stdout.write(f'   ID: {order.id} | Entrega: {delivery} | Estado: {order.status}') 